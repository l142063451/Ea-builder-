name: ISVGPU CI/CD

on:
  push:
    branches: [ main, develop, copilot/* ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always

jobs:
  rust-check:
    name: Rust Build and Test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy
        
    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          rust/target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('rust/Cargo.lock') }}
        
    - name: Check formatting
      run: cd rust && cargo fmt --all -- --check
      
    - name: Run Clippy
      run: cd rust && cargo clippy --all-targets --all-features -- -D warnings
      
    - name: Build
      run: cd rust && cargo build --verbose --all
      
    - name: Run tests
      run: cd rust && cargo test --verbose --all

  python-check:
    name: Python Setup and Test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
        
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: python/.venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('python/pyproject.toml') }}
        
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: cd python && poetry install --no-interaction --no-root
      
    - name: Install package
      run: cd python && poetry install --no-interaction
      
    - name: Run Python tests
      run: cd python && poetry run pytest tests/ -v
      
    - name: Check Python formatting
      run: cd python && poetry run black --check src/ tests/
      
    - name: Check imports
      run: cd python && poetry run isort --check-only src/ tests/
      
    - name: Lint with flake8
      run: cd python && poetry run flake8 src/ tests/

  notebooks:
    name: Execute Notebooks
    runs-on: ubuntu-latest
    needs: [python-check]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install Poetry and dependencies
      run: |
        cd python
        pip install poetry
        poetry install --no-interaction
        
    - name: Execute notebooks
      run: |
        cd python
        poetry run python ../scripts/run_notebooks_headless.py
        
    - name: Upload notebook artifacts
      uses: actions/upload-artifact@v3
      with:
        name: executed-notebooks
        path: python/notebooks/**/*.html

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [rust-check, python-check]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up test environment
      run: |
        # Will implement integration test setup
        echo "Integration test setup placeholder"
        
    - name: Run integration tests
      run: |
        # Will implement integration tests
        echo "Integration tests placeholder"

  documentation:
    name: Build Documentation
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Build Rust docs
      run: cd rust && cargo doc --no-deps --all
      
    - name: Build Python docs
      run: |
        cd python
        pip install poetry
        poetry install --no-interaction
        poetry run sphinx-build -b html docs/ docs/_build/
        
    - name: Upload documentation
      uses: actions/upload-artifact@v3
      with:
        name: documentation
        path: |
          rust/target/doc/
          python/docs/_build/