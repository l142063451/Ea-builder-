"""Database models for the Forex Trading Bot."""

from datetime import datetime, timezone
from decimal import Decimal
from typing import Optional
from sqlalchemy import (
    Column, Integer, String, DateTime, Numeric, Boolean, Text,
    ForeignKey, Index, UniqueConstraint, CheckConstraint, JSON
)
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import relationship, Session
import uuid

Base = declarative_base()

# Use JSON for cross-database compatibility
JsonColumn = JSON

class Currency(Base):
    """Currency pair information."""
    
    __tablename__ = "currencies"
    
    id = Column(Integer, primary_key=True, index=True)
    symbol = Column(String(10), unique=True, nullable=False, index=True)
    name = Column(String(100), nullable=False)
    base_currency = Column(String(3), nullable=False)
    quote_currency = Column(String(3), nullable=False)
    tick_size = Column(Numeric(10, 8), nullable=False, default=0.00001)
    contract_size = Column(Integer, nullable=False, default=100000)
    is_active = Column(Boolean, nullable=False, default=True)
    created_at = Column(DateTime(timezone=True), default=lambda: datetime.now(timezone.utc))
    
    # Relationships
    price_data = relationship("PriceData", back_populates="currency")
    trades = relationship("Trade", back_populates="currency")

class PriceData(Base):
    """OHLCV price data for different timeframes."""
    
    __tablename__ = "price_data"
    
    id = Column(Integer, primary_key=True, index=True)
    currency_id = Column(Integer, ForeignKey("currencies.id"), nullable=False)
    timestamp = Column(DateTime(timezone=True), nullable=False, index=True)
    timeframe = Column(String(5), nullable=False, index=True)  # 1m, 5m, 15m, 1h, 4h, 1d
    open_price = Column(Numeric(15, 8), nullable=False)
    high_price = Column(Numeric(15, 8), nullable=False)
    low_price = Column(Numeric(15, 8), nullable=False)
    close_price = Column(Numeric(15, 8), nullable=False)
    volume = Column(Numeric(20, 2), nullable=False, default=0)
    spread = Column(Numeric(10, 8), nullable=True)
    created_at = Column(DateTime(timezone=True), default=lambda: datetime.now(timezone.utc))
    
    # Relationships
    currency = relationship("Currency", back_populates="price_data")
    
    # Constraints
    __table_args__ = (
        UniqueConstraint("currency_id", "timestamp", "timeframe", name="uq_price_data_unique"),
        CheckConstraint("high_price >= low_price", name="check_high_low"),
        CheckConstraint("high_price >= open_price", name="check_high_open"),
        CheckConstraint("high_price >= close_price", name="check_high_close"),
        CheckConstraint("low_price <= open_price", name="check_low_open"),
        CheckConstraint("low_price <= close_price", name="check_low_close"),
        Index("ix_price_data_currency_time", "currency_id", "timestamp"),
        Index("ix_price_data_timeframe_time", "timeframe", "timestamp"),
    )

class TechnicalIndicator(Base):
    """Technical indicators calculated from price data."""
    
    __tablename__ = "technical_indicators"
    
    id = Column(Integer, primary_key=True, index=True)
    currency_id = Column(Integer, ForeignKey("currencies.id"), nullable=False)
    timestamp = Column(DateTime(timezone=True), nullable=False, index=True)
    timeframe = Column(String(5), nullable=False, index=True)
    indicator_name = Column(String(50), nullable=False)
    value = Column(Numeric(15, 8), nullable=False)
    parameters = Column(JsonColumn, nullable=True)  # Store indicator parameters
    created_at = Column(DateTime(timezone=True), default=lambda: datetime.now(timezone.utc))
    
    # Relationships
    currency = relationship("Currency")
    
    __table_args__ = (
        UniqueConstraint(
            "currency_id", "timestamp", "timeframe", "indicator_name", 
            name="uq_technical_indicator_unique"
        ),
        Index("ix_tech_ind_currency_time", "currency_id", "timestamp"),
        Index("ix_tech_ind_name_time", "indicator_name", "timestamp"),
    )

class TradingSignal(Base):
    """Trading signals generated by strategies."""
    
    __tablename__ = "trading_signals"
    
    id = Column(String(36), primary_key=True, default=lambda: str(uuid.uuid4()))
    currency_id = Column(Integer, ForeignKey("currencies.id"), nullable=False)
    strategy_name = Column(String(100), nullable=False, index=True)
    signal_type = Column(String(10), nullable=False)  # BUY, SELL, HOLD
    confidence = Column(Numeric(5, 4), nullable=False)  # 0.0 to 1.0
    entry_price = Column(Numeric(15, 8), nullable=True)
    stop_loss = Column(Numeric(15, 8), nullable=True)
    take_profit = Column(Numeric(15, 8), nullable=True)
    position_size = Column(Numeric(15, 8), nullable=True)
    signal_metadata = Column(JsonColumn, nullable=True)  # Strategy-specific data
    is_executed = Column(Boolean, nullable=False, default=False)
    created_at = Column(DateTime(timezone=True), default=lambda: datetime.now(timezone.utc), index=True)
    
    # Relationships
    currency = relationship("Currency")
    trades = relationship("Trade", back_populates="signal")

class Trade(Base):
    """Executed trades record."""
    
    __tablename__ = "trades"
    
    id = Column(String(36), primary_key=True, default=lambda: str(uuid.uuid4()))
    signal_id = Column(String(36), ForeignKey("trading_signals.id"), nullable=True)
    currency_id = Column(Integer, ForeignKey("currencies.id"), nullable=False)
    trade_type = Column(String(10), nullable=False)  # BUY, SELL
    position_size = Column(Numeric(15, 8), nullable=False)
    entry_price = Column(Numeric(15, 8), nullable=False)
    entry_time = Column(DateTime(timezone=True), nullable=False)
    exit_price = Column(Numeric(15, 8), nullable=True)
    exit_time = Column(DateTime(timezone=True), nullable=True)
    stop_loss = Column(Numeric(15, 8), nullable=True)
    take_profit = Column(Numeric(15, 8), nullable=True)
    commission = Column(Numeric(15, 8), nullable=False, default=0)
    swap = Column(Numeric(15, 8), nullable=False, default=0)
    profit_loss = Column(Numeric(15, 8), nullable=True)
    status = Column(String(20), nullable=False, default="OPEN")  # OPEN, CLOSED, CANCELLED
    trade_metadata = Column(JsonColumn, nullable=True)
    created_at = Column(DateTime(timezone=True), default=lambda: datetime.now(timezone.utc))
    updated_at = Column(DateTime(timezone=True), onupdate=lambda: datetime.now(timezone.utc))
    
    # Relationships
    currency = relationship("Currency", back_populates="trades")
    signal = relationship("TradingSignal", back_populates="trades")
    
    __table_args__ = (
        Index("ix_trades_currency_status", "currency_id", "status"),
        Index("ix_trades_entry_time", "entry_time"),
        Index("ix_trades_status_time", "status", "entry_time"),
    )

class PerformanceMetrics(Base):
    """Performance metrics tracking."""
    
    __tablename__ = "performance_metrics"
    
    id = Column(Integer, primary_key=True, index=True)
    strategy_name = Column(String(100), nullable=False, index=True)
    period_start = Column(DateTime(timezone=True), nullable=False)
    period_end = Column(DateTime(timezone=True), nullable=False)
    total_trades = Column(Integer, nullable=False, default=0)
    winning_trades = Column(Integer, nullable=False, default=0)
    losing_trades = Column(Integer, nullable=False, default=0)
    total_profit = Column(Numeric(15, 8), nullable=False, default=0)
    total_loss = Column(Numeric(15, 8), nullable=False, default=0)
    max_drawdown = Column(Numeric(15, 8), nullable=False, default=0)
    sharpe_ratio = Column(Numeric(10, 4), nullable=True)
    win_rate = Column(Numeric(5, 4), nullable=True)
    profit_factor = Column(Numeric(10, 4), nullable=True)
    accuracy = Column(Numeric(5, 4), nullable=True)
    created_at = Column(DateTime(timezone=True), default=lambda: datetime.now(timezone.utc))
    
    __table_args__ = (
        Index("ix_perf_strategy_period", "strategy_name", "period_start"),
    )

class SystemLog(Base):
    """System events and error logging."""
    
    __tablename__ = "system_logs"
    
    id = Column(Integer, primary_key=True, index=True)
    level = Column(String(10), nullable=False, index=True)  # DEBUG, INFO, WARNING, ERROR, CRITICAL
    source = Column(String(100), nullable=False, index=True)  # Module or component name
    message = Column(Text, nullable=False)
    details = Column(JsonColumn, nullable=True)  # Additional structured data
    timestamp = Column(DateTime(timezone=True), default=lambda: datetime.now(timezone.utc), index=True)
    
    __table_args__ = (
        Index("ix_system_logs_level_time", "level", "timestamp"),
        Index("ix_system_logs_source_time", "source", "timestamp"),
    )

class MarketMemory(Base):
    """Market condition memory for similarity search."""
    
    __tablename__ = "market_memory"
    
    id = Column(String(36), primary_key=True, default=lambda: str(uuid.uuid4()))
    timestamp = Column(DateTime(timezone=True), nullable=False, index=True)
    market_state = Column(JsonColumn, nullable=False)  # Market conditions at the time
    embedding = Column(Text, nullable=False)  # Base64 encoded feature vector
    trade_outcome = Column(JsonColumn, nullable=True)  # Associated trade results
    strategy_used = Column(String(100), nullable=False)
    confidence = Column(Numeric(5, 4), nullable=False)
    created_at = Column(DateTime(timezone=True), default=lambda: datetime.now(timezone.utc))
    
    __table_args__ = (
        Index("ix_market_memory_strategy_time", "strategy_used", "timestamp"),
    )